############################################ Manejo de excepciones ############################################################3
#Es como decirle a python que si llega a haber un error de ejecuci√≥n que lo pase, solo maneja errores de l√≥gica y no de sintasis. 

def divir_por_cero(a,b): 
  return a/b #perfectamente escrito

divir_por_cero(1/0) 

'''
Me suelta el error:  

Traceback (most recent call last):
  File "/tmp/main.py", line 2, in <module>
    import user_code
  File "/tmp/user_code.py", line 4, in <module>
    divir_por_cero(1/0) 
                   ~^~
ZeroDivisionError: division by zero

'''
#Ahora, esperando algun error de ejecuci√≥n lo puedo pasar con uno o varios except: 

def division(a,b): ES COMO PONER ALERTAS O GRITOS EN EL CIELO (EN LA FUNCION LLAMADA) Y TENER ACCOUNTABILITY DE QUE ALGO PUEDE SALIR MAL, PARA MANEJARLO EN LA FUNCION LAMADORA.
  try: 
    return a/b 
  except ZeroDivisionError: #Como hay error hace este bloque y no el de arriba, esta es una de los errores predeterminados de python, si pongo uno que no existe habr√° error de suntaxis en el c√≥digo 
    print('Eso est√° mal')
    return (ZeroDivisionError) 
  finally: #este es un codigo que le digo, hazte s√≠ o si siempre con finally, as√≠ el except tenga un return 
    print('yo no me ecutar√© porque el except me saca de la funci√≥n')

division(1,0) #As√≠ este mal por logica, el c√≥digo va a hacer una excepsion, pueden ser m√°s de una. 


print("El codigo finalizo sin errores que me detuvieran")

'''
Eso est√° mal
yo no me ecutar√© porque el except me saca de la funci√≥n
El codigo finalizo sin errores que me detuvieran

[Execution complete with exit code 0]
'''

################################ Raise y Clase Exception #######################################################################################


def divide(a, b):
    if b == 0:
        raise ZeroDivisionError("division by zero, this is imposible")  # El raise sirve para prever errores de logica creando mi codigo, ac√° le setee, si alguien trata de poner un cero que el programa raise un error de una 
    return a / b


############### Puedo ponerle un error personalizado al crearlo en la clase: -----------------------------------------------



#Ac√° hago una clase que herede de Exception: 

class DivisionPorCeroError(Exception):
    """Excepci√≥n personalizada para manejar la divisi√≥n por cero."""
    def __init__(self, message="El divisor no puede ser cero"):
        self.message = message
        super().__init__(self.message)

# Funci√≥n que utiliza la excepci√≥n personalizada
def division(a, b): 
    if b == 0:  # Verificamos el divisor
        raise DivisionPorCeroError("¬°Intentaste dividir entre cero!")  # Lanzamos el error personalizado
    return a / b


# üö® Tutorial Completo: Manejo de Excepciones en Python y Java -------------------------------------------------------------------------------------------------------

## üéØ ¬øQu√© vas a aprender?
Este tutorial te ense√±ar√° desde lo m√°s b√°sico hasta t√©cnicas avanzadas para manejar situaciones inesperadas en tu c√≥digo como un programador profesional. Empezaremos con conceptos simples y construiremos hacia casos m√°s complejos.

---

## üìö PARTE 1: ¬øQu√© es una Excepci√≥n?

### ü§î Concepto Fundamental
Una excepci√≥n es como una se√±al de alarma que tu programa env√≠a cuando algo inesperado sucede. Es la manera civilizada de decir "¬°Houston, tenemos un problema!" en lugar de que tu programa simplemente explote sin explicaci√≥n.

**Piensa en esto:** Es como cuando tu auto detecta un problema y prende una luz espec√≠fica en el tablero. No se detiene inmediatamente, pero te avisa exactamente qu√© est√° mal para que puedas decidir qu√© hacer.

### üî• El problema con ignorar situaciones inesperadas:
```python
# ‚ùå MAL: Ignorar problemas
def dividir_mal(a, b):
    return a / b  # ¬øQu√© pasa si b es 0?

resultado = dividir_mal(10, 0)  # ¬°BOOM! üí• ZeroDivisionError
```

### ‚úÖ La soluci√≥n profesional:
```python
# ‚úÖ BIEN: Manejar el problema adecuadamente
def dividir_bien(a, b):
    if b == 0:
        raise ValueError("No se puede dividir por cero")
    return a / b

try:
    resultado = dividir_bien(10, 0)
except ValueError as error:
    print(f"Situaci√≥n controlada: {error}")
    resultado = None
```

---

## üõë PARTE 2: ¬øQu√© hace REALMENTE `raise`? (¬°La Pregunta Clave!)

### üö® S√ç, `raise` funciona exactamente como `return` en t√©rminos de flujo

Esta es una comprensi√≥n fundamental que muchos tutoriales no explican claramente: **`raise` detiene la ejecuci√≥n de la funci√≥n inmediatamente**, tal como lo hace `return`. La diferencia es QU√â env√≠a de vuelta al c√≥digo que llam√≥ la funci√≥n.

```python
def ejemplo_flujo_raise():
    print("üöÄ Inicio de la funci√≥n")
    
    edad = -5
    if edad < 0:
        print("‚ö†Ô∏è Problema detectado, preparando raise...")
        raise ValueError("Edad no puede ser negativa")  # ‚¨ÖÔ∏è ¬°AQU√ç SE DETIENE TODO!
        
    # ‚ùå ESTAS L√çNEAS NUNCA SE EJECUTAN
    print("‚úÖ Edad validada correctamente")
    return "Usuario creado exitosamente"

# Llamamos la funci√≥n
try:
    resultado = ejemplo_flujo_raise()
    print(f"Resultado: {resultado}")  # Esto tampoco se ejecuta
except ValueError as problema:
    print(f"üõë Funci√≥n se detuvo por: {problema}")

# Salida:
# üöÄ Inicio de la funci√≥n  
# ‚ö†Ô∏è Problema detectado, preparando raise...
# üõë Funci√≥n se detuvo por: Edad no puede ser negativa
```

### üîÑ Comparaci√≥n Directa: `return` vs `raise`

```python
def funcion_con_return():
    print("Ejecutando l√≠nea 1")
    if True:
        print("Ejecutando l√≠nea 2")
        return "Todo sali√≥ bien"  # ‚¨ÖÔ∏è DETIENE aqu√≠ y env√≠a un valor
        
    # ‚ùå Esta l√≠nea nunca se ejecuta
    print("Esta l√≠nea nunca se ejecuta")

def funcion_con_raise():
    print("Ejecutando l√≠nea 1") 
    if True:
        print("Ejecutando l√≠nea 2")
        raise ValueError("Algo sali√≥ mal")  # ‚¨ÖÔ∏è DETIENE aqu√≠ y env√≠a una excepci√≥n
        
    # ‚ùå Esta l√≠nea nunca se ejecuta
    print("Esta l√≠nea nunca se ejecuta")

# Ambas funciones se comportan igual en t√©rminos de flujo:
# - Ejecutan hasta el punto de return/raise
# - Se detienen inmediatamente
# - Env√≠an algo de vuelta (valor vs excepci√≥n)
```

### üéØ La Diferencia Clave en el Destino

La diferencia no est√° en CU√ÅNDO se detiene la funci√≥n (ambos lo hacen inmediatamente), sino en AD√ìNDE va lo que env√≠an:

```python
def procesar_usuario(edad):
    if edad < 0:
        # raise env√≠a la excepci√≥n al bloque except m√°s cercano
        raise ValueError(f"Edad {edad} es inv√°lida")
        
    # return env√≠a el valor directamente a quien llam√≥ la funci√≥n    
    return f"Usuario con {edad} a√±os procesado"

# El c√≥digo que llama decide d√≥nde va cada cosa:
try:
    # Si la funci√≥n hace return, el valor va aqu√≠ ‚¨áÔ∏è
    resultado = procesar_usuario(25)
    print(f"√âxito: {resultado}")
    
except ValueError as problema:
    # Si la funci√≥n hace raise, la excepci√≥n va aqu√≠ ‚¨áÔ∏è
    print(f"Problema manejado: {problema}")
```

---

## üêç PARTE 3: Python - Manejo de Excepciones

### üèóÔ∏è Estructura B√°sica: Tu Red de Seguridad
```python
try:
    # C√≥digo que podr√≠a lanzar una excepci√≥n
    operacion_peligrosa()
    print("‚úÖ Operaci√≥n completada sin problemas")
    
except TipoDeExcepcion as variable_excepcion:
    # Se ejecuta SOLO si se lanz√≥ ese tipo espec√≠fico de excepci√≥n
    print(f"üõ†Ô∏è Manejando problema espec√≠fico: {variable_excepcion}")
    
else:
    # Se ejecuta SOLO si NO se lanz√≥ ninguna excepci√≥n
    print("üéâ Todo sali√≥ perfectamente")
    
finally:
    # Se ejecuta SIEMPRE, haya excepci√≥n o no
    print("üîÑ Limpiando recursos...")
```

### üìù Ejemplo Paso a Paso: Viendo el Flujo en Acci√≥n
```python
def procesar_edad_detallado():
    print("üîç Iniciando procesamiento de edad...")
    
    try:
        edad_texto = input("Ingresa tu edad: ")
        print(f"üìù Recibido: '{edad_texto}'")
        
        # Esta l√≠nea puede lanzar ValueError si no es un n√∫mero
        edad = int(edad_texto)  
        print(f"üî¢ Convertido a n√∫mero: {edad}")
        
        # Estas validaciones pueden lanzar ValueError con nuestros mensajes
        if edad < 0:
            print("‚ö†Ô∏è Detectada edad negativa, lanzando excepci√≥n...")
            raise ValueError("La edad no puede ser negativa")
            # ‚¨ÖÔ∏è Si llega aqu√≠, la funci√≥n se DETIENE inmediatamente
            
        if edad > 120:
            print("‚ö†Ô∏è Detectada edad excesiva, lanzando excepci√≥n...")
            raise ValueError("¬øEn serio tienes m√°s de 120 a√±os? ü§®")
            # ‚¨ÖÔ∏è Si llega aqu√≠, la funci√≥n se DETIENE inmediatamente
            
    except ValueError as problema:
        # Llegamos aqu√≠ si cualquier raise ValueError fue ejecutado
        print(f"üõë Excepci√≥n capturada: {problema}")
        
        if "invalid literal" in str(problema):
            print("üí° Consejo: Aseg√∫rate de ingresar solo n√∫meros")
        else:
            print("üí° Consejo: Verifica que la edad sea realista")
            
        return None  # Terminamos la funci√≥n devolviendo None
        
    else:
        # Solo llegamos aqu√≠ si NO se lanz√≥ ninguna excepci√≥n
        print(f"‚úÖ Edad v√°lida procesada: {edad}")
        return edad
        
    finally:
        # Siempre llegamos aqu√≠, haya excepci√≥n o no
        print("üèÅ Procesamiento finalizado")

# Probemos diferentes casos para ver el flujo:
print("=== Caso 1: Edad v√°lida ===")
resultado1 = procesar_edad_detallado()  # Ingresa: 25
print(f"Resultado: {resultado1}")

print("\n=== Caso 2: Edad inv√°lida ===") 
resultado2 = procesar_edad_detallado()  # Ingresa: -5
print(f"Resultado: {resultado2}")
```

### üéØ Capturar M√∫ltiples Tipos de Problemas
```python
def leer_archivo_inteligente(nombre_archivo):
    """
    Esta funci√≥n demuestra c√≥mo manejar diferentes tipos de problemas
    que pueden ocurrir al trabajar con archivos
    """
    print(f"üìÅ Intentando leer archivo: {nombre_archivo}")
    
    try:
        # Cada una de estas operaciones puede fallar de manera diferente
        with open(nombre_archivo, 'r', encoding='utf-8') as archivo:
            contenido = archivo.read()
            print("‚úÖ Archivo le√≠do exitosamente")
            
            # Intentamos procesar como JSON
            import json
            datos = json.loads(contenido)
            print("‚úÖ JSON procesado exitosamente")
            return datos
            
    except FileNotFoundError:
        # Se lanza cuando el archivo no existe
        print(f"‚ùå El archivo '{nombre_archivo}' no fue encontrado")
        print("üí° Verifica que el nombre y la ruta sean correctos")
        return None
        
    except PermissionError:
        # Se lanza cuando no tenemos permisos para leer el archivo
        print(f"üîí No tienes permisos para leer '{nombre_archivo}'")
        print("üí° Contacta al administrador del sistema")
        return None
        
    except json.JSONDecodeError as error_json:
        # Se lanza cuando el archivo existe pero no es JSON v√°lido
        print(f"üìÑ El archivo no contiene JSON v√°lido")
        print(f"üîç Error espec√≠fico: {error_json}")
        print("üí° Verifica el formato del archivo")
        return None
        
    except UnicodeDecodeError:
        # Se lanza cuando el archivo tiene codificaci√≥n incompatible
        print(f"üî§ Problema de codificaci√≥n en el archivo")
        print("üí° El archivo podr√≠a estar en una codificaci√≥n diferente")
        return None
        
    except Exception as error_inesperado:
        # Captura cualquier otro problema que no anticipamos
        print(f"üí• Ocurri√≥ un problema inesperado: {error_inesperado}")
        print("üí° Por favor reporta este error")
        return None

# Ejemplos de uso
datos = leer_archivo_inteligente("configuracion.json")
if datos:
    print("üéâ Datos cargados correctamente:", datos)
else:
    print("üòî No se pudieron cargar los datos")
```

### üöÄ Crear Tus Propias Excepciones Personalizadas

```python
# Definimos nuestras excepciones personalizadas para comunicar problemas espec√≠ficos
class ExcepcionValidacion(Exception):
    """Clase base para todas nuestras excepciones de validaci√≥n"""
    def __init__(self, mensaje, valor_problematico=None):
        super().__init__(mensaje)
        self.valor_problematico = valor_problematico

class EdadNegativaException(ExcepcionValidacion):
    """Se lanza cuando detectamos una edad negativa"""
    def __init__(self, edad):
        mensaje = f"La edad {edad} es negativa, lo cual es imposible"
        super().__init__(mensaje, edad)
        self.edad = edad

class EdadExcesivaException(ExcepcionValidacion):  
    """Se lanza cuando detectamos una edad irrealmente alta"""
    def __init__(self, edad):
        mensaje = f"La edad {edad} parece irreal (mayor a 120 a√±os)"
        super().__init__(mensaje, edad)
        self.edad = edad

def validar_edad_profesional(edad):
    """
    Valida edad y lanza excepciones espec√≠ficas seg√∫n el problema detectado.
    Nota: Esta funci√≥n se DETIENE inmediatamente cuando hace raise.
    """
    print(f"üîç Validando edad: {edad}")
    
    # Verificar tipo de dato
    if not isinstance(edad, int):
        print(f"‚ùå Tipo incorrecto detectado: {type(edad)}")
        # La funci√≥n se DETIENE aqu√≠ si el tipo est√° mal
        raise TypeError(f"La edad debe ser un n√∫mero entero, no {type(edad)}")
    
    # Verificar rango negativo
    if edad < 0:
        print(f"‚ùå Edad negativa detectada: {edad}")
        # La funci√≥n se DETIENE aqu√≠ si la edad es negativa  
        raise EdadNegativaException(edad)
    
    # Verificar rango excesivo
    if edad > 120:
        print(f"‚ùå Edad excesiva detectada: {edad}")
        # La funci√≥n se DETIENE aqu√≠ si la edad es muy alta
        raise EdadExcesivaException(edad)
    
    # Si llegamos hasta aqu√≠, significa que todas las validaciones pasaron
    print(f"‚úÖ Edad {edad} es v√°lida")
    return True

def registrar_usuario_completo(nombre, edad):
    """
    Demuestra c√≥mo el c√≥digo que llama puede manejar diferentes tipos de problemas
    que se comunican desde las funciones de validaci√≥n
    """
    print(f"üë§ Intentando registrar usuario: {nombre}, {edad} a√±os")
    
    try:
        # Intentamos validar la edad
        validar_edad_profesional(edad)
        
        # Si llegamos aqu√≠, la validaci√≥n fue exitosa
        print(f"üéâ Usuario {nombre} registrado exitosamente")
        return {"exito": True, "usuario": nombre, "edad": edad}
        
    except EdadNegativaException as problema_negativo:
        print(f"üîß Manejando edad negativa: {problema_negativo}")
        print("üí° Sugerencia: ¬øOlvidaste el signo menos?")
        return {"exito": False, "razon": "edad_negativa", "sugerencia": "Revisa el signo"}
        
    except EdadExcesivaException as problema_excesivo:
        print(f"üîß Manejando edad excesiva: {problema_excesivo}")
        print("üí° Sugerencia: Verifica que la edad sea correcta")
        return {"exito": False, "razon": "edad_excesiva", "sugerencia": "Verifica la edad"}
        
    except TypeError as problema_tipo:
        print(f"üîß Manejando tipo incorrecto: {problema_tipo}")
        print("üí° Sugerencia: Aseg√∫rate de usar un n√∫mero entero")
        return {"exito": False, "razon": "tipo_incorrecto", "sugerencia": "Usa n√∫meros enteros"}

# Ejemplos que demuestran el flujo completo
print("=== Prueba 1: Caso exitoso ===")
resultado1 = registrar_usuario_completo("Ana", 25)
print(f"Resultado: {resultado1}\n")

print("=== Prueba 2: Edad negativa ===")
resultado2 = registrar_usuario_completo("Luis", -30)
print(f"Resultado: {resultado2}\n")

print("=== Prueba 3: Edad excesiva ===")
resultado3 = registrar_usuario_completo("Carmen", 150)
print(f"Resultado: {resultado3}\n")

print("=== Prueba 4: Tipo incorrecto ===")
resultado4 = registrar_usuario_completo("Pedro", "treinta")
print(f"Resultado: {resultado4}")
```

---

## ‚òï PARTE 4: Java - La Misma L√≥gica, Sintaxis Diferente

### üèóÔ∏è Estructura B√°sica en Java
```java
public class ManejoExcepciones {
    
    public static void ejemploBasico() {
        try {
            // C√≥digo que puede lanzar excepciones
            operacionPeligrosa();
            System.out.println("‚úÖ Operaci√≥n completada exitosamente");
            
        } catch (TipoDeExcepcion e) {
            // Se ejecuta SOLO si se lanza ese tipo espec√≠fico
            System.out.println("üõ†Ô∏è Manejando problema: " + e.getMessage());
            
        } catch (OtroTipoDeExcepcion e) {
            // Puedes tener m√∫ltiples catch para diferentes tipos
            System.out.println("üîß Manejando otro tipo de problema: " + e.getMessage());
            
        } finally {
            // Se ejecuta SIEMPRE, haya excepci√≥n o no
            System.out.println("üîÑ Limpiando recursos...");
        }
    }
}
```

### üìù Ejemplo Detallado: Validaci√≥n de Edad en Java

```java
public class ValidadorEdad {
    
    // Excepci√≥n personalizada para problemas de edad
    public static class EdadInvalidaException extends Exception {
        private int edadProblematica;
        
        public EdadInvalidaException(String mensaje, int edad) {
            super(mensaje);
            this.edadProblematica = edad;
        }
        
        public int getEdadProblematica() {
            return edadProblematica;
        }
    }
    
    /**
     * Valida una edad y lanza excepciones espec√≠ficas.
     * IMPORTANTE: Esta funci√≥n se DETIENE inmediatamente cuando hace throw.
     */
    public static boolean validarEdad(int edad) throws EdadInvalidaException {
        System.out.println("üîç Validando edad: " + edad);
        
        if (edad < 0) {
            System.out.println("‚ùå Edad negativa detectada: " + edad);
            // La funci√≥n se DETIENE aqu√≠ si la edad es negativa
            throw new EdadInvalidaException("La edad no puede ser negativa", edad);
        }
        
        if (edad > 120) {
            System.out.println("‚ùå Edad excesiva detectada: " + edad);
            // La funci√≥n se DETIENE aqu√≠ si la edad es muy alta
            throw new EdadInvalidaException("La edad no puede ser mayor a 120 a√±os", edad);
        }
        
        // Si llegamos hasta aqu√≠, la edad es v√°lida
        System.out.println("‚úÖ Edad " + edad + " es v√°lida");
        return true;
    }
    
    /**
     * Registra un usuario manejando diferentes tipos de problemas
     */
    public static String registrarUsuario(String nombre, int edad) {
        System.out.println("üë§ Intentando registrar usuario: " + nombre + ", " + edad + " a√±os");
        
        try {
            // Intentamos validar la edad
            validarEdad(edad);
            
            // Si llegamos aqu√≠, la validaci√≥n fue exitosa
            System.out.println("üéâ Usuario " + nombre + " registrado exitosamente");
            return "Usuario registrado: " + nombre;
            
        } catch (EdadInvalidaException problema) {
            System.out.println("üõë Excepci√≥n capturada: " + problema.getMessage());
            
            if (problema.getEdadProblematica() < 0) {
                System.out.println("üí° Sugerencia: Verifica que no haya un signo negativo");
                return "Error: Edad negativa - " + problema.getMessage();
            } else {
                System.out.println("üí° Sugerencia: Verifica que la edad sea realista");
                return "Error: Edad excesiva - " + problema.getMessage();
            }
        }
    }
    
    public static void main(String[] args) {
        System.out.println("=== Prueba 1: Caso exitoso ===");
        String resultado1 = registrarUsuario("Ana", 25);
        System.out.println("Resultado: " + resultado1 + "\n");
        
        System.out.println("=== Prueba 2: Edad negativa ===");
        String resultado2 = registrarUsuario("Luis", -30);
        System.out.println("Resultado: " + resultado2 + "\n");
        
        System.out.println("=== Prueba 3: Edad excesiva ===");
        String resultado3 = registrarUsuario("Carmen", 150);
        System.out.println("Resultado: " + resultado3 + "\n");
    }
}
```

### üîÑ Comparaci√≥n Directa Python vs Java

```python
# PYTHON: raise Exception()
if problema_detectado:
    print("üõë Problema detectado, funci√≥n se detiene aqu√≠")
    raise ValueError("Descripci√≥n del problema")
    # ‚¨ÖÔ∏è Todo lo que est√© despu√©s de esta l√≠nea NO se ejecuta

# JAVA: throw new Exception()
if (problemaDetectado) {
    System.out.println("üõë Problema detectado, funci√≥n se detiene aqu√≠");
    throw new IllegalArgumentException("Descripci√≥n del problema");
    // ‚¨ÖÔ∏è Todo lo que est√© despu√©s de esta l√≠nea NO se ejecuta
}
```

---

## üéØ PARTE 5: Cu√°ndo y C√≥mo Usar Excepciones

### ‚úÖ USA `raise/throw` cuando:

```python
def retirar_dinero(cuenta, monto):
    """
    Funci√≥n que puede encontrarse con situaciones que no puede resolver por s√≠ misma
    """
    print(f"üí∞ Intentando retirar ${monto} de cuenta con saldo ${cuenta.saldo}")
    
    # Situaci√≥n 1: Valor il√≥gico - la funci√≥n no puede "arreglarlo"
    if monto <= 0:
        print("‚ùå Monto inv√°lido detectado, deteniendo funci√≥n")
        raise ValueError("No puedes retirar una cantidad negativa o cero")
        # ‚¨ÖÔ∏è Funci√≥n se detiene aqu√≠, no puede continuar
    
    # Situaci√≥n 2: Fondos insuficientes - la funci√≥n no puede crear dinero
    if monto > cuenta.saldo:
        print("‚ùå Fondos insuficientes detectados, deteniendo funci√≥n")  
        raise ValueError("Fondos insuficientes")
        # ‚¨ÖÔ∏è Funci√≥n se detiene aqu√≠, no puede continuar
    
    # Si llegamos aqu√≠, todo est√° bien y podemos proceder
    cuenta.saldo -= monto
    print(f"‚úÖ Retiro exitoso, nuevo saldo: ${cuenta.saldo}")
    return cuenta.saldo

# El c√≥digo que usa esta funci√≥n decide qu√© hacer con los problemas
class Cuenta:
    def __init__(self, saldo):
        self.saldo = saldo

def procesar_retiro_inteligente(cuenta, monto):
    try:
        nuevo_saldo = retirar_dinero(cuenta, monto)
        print(f"üéâ Retiro procesado, saldo actual: ${nuevo_saldo}")
        
    except ValueError as problema:
        if "negativa" in str(problema):
            print("üí° El sistema corrigi√≥ autom√°ticamente el monto a positivo")
            # Podr√≠amos intentar con el valor absoluto
            return procesar_retiro_inteligente(cuenta, abs(monto))
        elif "insuficientes" in str(problema):
            print(f"üí≥ Ofreciendo retirar todo el saldo disponible: ${cuenta.saldo}")
            return procesar_retiro_inteligente(cuenta, cuenta.saldo)

# Ejemplo de uso
mi_cuenta = Cuenta(100)
procesar_retiro_inteligente(mi_cuenta, -50)  # Sistema lo corrige autom√°ticamente
```

### ‚ùå NO uses `raise/throw` para control de flujo normal:

```python
# ‚ùå MAL: Usar excepciones para flujo normal
def buscar_usuario_mal(usuarios, nombre):
    for usuario in usuarios:
        if usuario.nombre == nombre:
            return usuario
    # Esto NO es una situaci√≥n excepcional, es un resultado normal posible
    raise ValueError("Usuario no encontrado")  # ¬°Malo!

# ‚úÖ MEJOR: Retornar None o un valor especial para casos normales
def buscar_usuario_bien(usuarios, nombre):
    for usuario in usuarios:
        if usuario.nombre == nombre:
            return usuario
    # Es normal que a veces un usuario no exista
    return None  # Resultado normal, no excepcional

# Uso correcto
usuario = buscar_usuario_bien(lista_usuarios, "Ana")
if usuario is None:
    print("Usuario no encontrado - situaci√≥n normal")
else:
    print(f"Usuario encontrado: {usuario.nombre}")
```

---

## üß© PARTE 6: El Patr√≥n Mental Correcto

### ü§î Preguntas que Debes Hacerte

Cuando escribas c√≥digo, preg√∫ntate:

**1. "¬øQu√© situaciones inesperadas pueden ocurrir en esta funci√≥n?"**
```python
def calcular_promedio(numeros):
    # Situaci√≥n inesperada: lista vac√≠a
    if len(numeros) == 0:
        raise ValueError("No se puede calcular promedio de lista vac√≠a")
    
    return sum(numeros) / len(numeros)
```

**2. "¬øMi funci√≥n puede hacer algo √∫til si esta situaci√≥n ocurre?"**
```python
def leer_configuracion(archivo):
    # Mi funci√≥n NO puede crear el archivo de configuraci√≥n
    # Esa decisi√≥n debe tomarla el c√≥digo que me llama
    if not os.path.exists(archivo):
        raise FileNotFoundError(f"Archivo de configuraci√≥n {archivo} no existe")
    
    # Mi funci√≥n S√ç puede leer el archivo si existe
    with open(archivo) as f:
        return f.read()
```

**3. "¬øEl c√≥digo que va a usar mi funci√≥n tiene mejor contexto para decidir qu√© hacer?"**
```python
def validar_contrase√±a(password):
    # Yo solo valido, no decido qu√© hacer si falla
    if len(password) < 8:
        raise ValueError("Contrase√±a debe tener al menos 8 caracteres")
    
    if not any(c.isupper() for c in password):
        raise ValueError("Contrase√±a debe tener al menos una may√∫scula")
    
    return True

def crear_cuenta_usuario(email, password):
    # YO decido qu√© hacer cuando la validaci√≥n falla
    try:
        validar_contrase√±a(password)
        # Crear cuenta...
        
    except ValueError as problema_password:
        # Puedo ofrecer generar una contrase√±a autom√°tica
        print(f"Problema con contrase√±a: {problema_password}")
        password_sugerido = generar_contrase√±a_segura()
        print(f"¬øQuieres usar esta contrase√±a generada? {password_sugerido}")
```

### üé™ Ejemplo Final: Integrando Todo

```python
class SistemaBanco:
    def __init__(self):
        self.cuentas = {}
    
    def validar_numero_cuenta(self, numero):
        """
        Solo valida formato, no decide qu√© hacer si est√° mal
        Se DETIENE inmediatamente si encuentra un problema
        """
        if not isinstance(numero, str):
            raise TypeError("N√∫mero de cuenta debe ser texto")
            # ‚¨ÖÔ∏è Funci√≥n se detiene aqu√≠ si no es string
            
        if len(numero) != 10:
            raise ValueError("N√∫mero de cuenta debe tener 10 d√≠gitos")
            # ‚¨ÖÔ∏è Funci√≥n se detiene aqu√≠ si longitud es incorrecta
            
        if not numero.isdigit():
            raise ValueError("N√∫mero de cuenta solo debe contener n√∫meros")
            # ‚¨ÖÔ∏è Funci√≥n se detiene aqu√≠ si contiene caracteres no num√©ricos
        
        return True
    
    def buscar_cuenta(self, numero):
        """
        Busca cuenta y comunica espec√≠ficamente si no existe
        Se DETIENE inmediatamente si no encuentra la cuenta
        """
        self.validar_numero_cuenta(numero)  # Puede detenerse aqu√≠
        
        if numero not in self.cuentas:
            raise KeyError(f"Cuenta {numero} no existe en el sistema")
            # ‚¨ÖÔ∏è Funci√≥n se detiene aqu√≠ si cuenta no existe
            
        return self.cuentas[numero]
    
    def transferir_dinero(self, cuenta_origen, cuenta_destino, monto):
        """
        Maneja las situaciones excepcionales y decide qu√© hacer con cada una
        """
        print(f"üîÑ Iniciando transferencia de ${monto}")
        
        try:
            # Cada una de estas operaciones puede detenerse por diferentes razones
            cuenta1 = self.buscar_cuenta(cuenta_origen)
            print(f"‚úÖ Cuenta origen encontrada")
            
            cuenta2 = self.buscar_cuenta(cuenta_destino)  
            print(f"‚úÖ Cuenta destino encontrada")
            
            if cuenta1.saldo < monto:
                raise ValueError(f"Saldo insuficiente: ${cuenta1.saldo} < ${monto}")
                # ‚¨ÖÔ∏è Se detiene aqu√≠ si no hay fondos
            
            # Si llegamos aqu√≠, todo est√° validado
            cuenta1.saldo -= monto
            cuenta2.saldo += monto
            return f"Transferencia exitosa: ${monto} transferidos"
            
        except TypeError as problema_tipo:
            return f"‚ùå Error de formato: {problema_tipo}"
            
        except ValueError as problema_validacion:
            if "d√≠gitos" in str(problema_validacion):
                return f"‚ùå Formato de cuenta incorrecto: {problema_validacion}"
            else:
                return f"‚ùå Problema con el monto: {problema_validacion}"
                
        except KeyError as problema_cuenta:
            return f"‚ùå Cuenta no encontrada: {problema_cuenta}"

# Ejemplo de uso completo
class Cuenta:
    def __init__(self, numero, saldo):
        self.numero = numero
        self.saldo = saldo

# Crear sistema y cuentas
banco = SistemaBanco()
banco.cuentas["1234567890"] = Cuenta("1234567890", 1000)
banco.cuentas["0987654321"] = Cuenta("0987654321", 500)

# Probar diferentes escenarios
print("=== Caso 1: Transferencia exitosa ===")
resultado1 =
