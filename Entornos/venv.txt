# 1 · Crear el entorno virtual (asegúrate de estar en la raíz del proyecto)
python3 -m venv .venv          # usa python3 en lugar de python

# Si te dice “No module named venv…”
# instala primero el paquete de sistema (solo una vez):
#   sudo apt update
#   sudo apt install python3-venv

# 2 · Activar el entorno
source .venv/bin/activate      # ahora sí existe la ruta
# en Windows PowerShell sería: .venv\Scripts\Activate.ps1

---------------------------------------------------------------------------------------
╔══════════════════════════════════════════════════════════════════╗
║                 ¿QUÉ ES UN VENV Y POR QUÉ USARLO?                ║
╚══════════════════════════════════════════════════════════════════╝

1.  ¿QUÉ ES?
    Un *virtual environment* (venv) es simplemente una carpeta dentro de tu
    proyecto que contiene:
        •   una copia ligera del intérprete de Python;
        •   su propio directorio de paquetes (*site-packages*);
        •   scripts de activación/desactivación.

    Todo lo instalado con `pip` mientras el venv está activo vive **solo**
    en esa carpeta. Así evitas mezclar dependencias con otros proyectos
    o con el Python global del sistema.

2.  ¿POR QUÉ ES ÚTIL?
        •   Aislamiento total de versiones: cada proyecto maneja sus
            librerías sin afectar a los demás.
        •   Reproducible: basta compartir `requirements.txt` para que
            cualquiera replique el entorno exacto.
        •   Sin privilegios de superusuario: todo queda en tu home.
        •   Limpieza sencilla: borrar la carpeta ■ adiós entorno.

3.  CÓMO CREARLO Y USARLO
    (ejemplo en Linux/macOS/WSL; en Windows cambia `source` por
    `venv\Scripts\activate`)

        # 1) Crear la carpeta
        python3 -m venv .venv

        # 2) Activar cada vez que trabajes
        source .venv/bin/activate

        # 3) Instalar paquetes
        pip install PyQt5 matplotlib pandas

        # 4) Guardar la lista exacta de deps
        pip freeze > requirements.txt

        # 5) Desactivar cuando termines
        deactivate

4.  ¿Y SI YA EMPECÉ SIN VENV?
        •   Crea ahora `.venv` como arriba.
        •   Actívalo.
        •   Reinstala en él los paquetes que tu proyecto necesita
            (puedes copiarlos de `pip freeze` del entorno global).
        •   A partir de entonces, trabaja siempre con el venv activo.

5.  BUENAS PRÁCTICAS RÁPIDAS
        •   Un venv por proyecto.
        •   Añádelo a `.gitignore`.
        •   Usa siempre el mismo `python`/`pip` tras activar.
        •   Comparte `requirements.txt` (o `pyproject.toml` si usas Poetry).

╔═════════════════════════════╗
║  COMANDOS DE REFERENCIA     ║
╚═════════════════════════════╝
        python3 -m venv .venv        ← crea venv
        source .venv/bin/activate    ← activa (Linux/macOS/WSL)
        .venv\Scripts\activate       ← activa (Windows)
        pip install paquete          ← instala en el venv activo
        pip freeze > requirements.txt← congela deps
        deactivate                   ← desactiva

Con esto tendrás entornos limpios, reproductibles y sin “dependency hell”.


--------------------------------------------------------------------------------------------------------------------------------------------------

```
╔══════════════════════════════════════════════════════════════════╗
║   ¿QUÉ PASA CON MI VENV CUANDO SUBO EL PROYECTO A GITHUB?        ║
╚══════════════════════════════════════════════════════════════════╝

1.  ¿SE SUBE REALMENTE LA CARPETA `.venv/`?
        •   **No debería**. La buena práctica es añadirla a tu
            `.gitignore`, por lo que:
                -   El resto del equipo **no verá** tu venv en el
                    repositorio remoto.
                -   Se evita cargar cientos de megas de binarios
                    y dependencias compiladas.

2.  ¿QUÉ VERÁN LOS DEMÁS COLABORADORES?
        •   Verán tu código fuente, tu `requirements.txt`
            (o `pyproject.toml`) y el `.gitignore` que excluye `.venv/`.
        •   No tendrán tus paquetes instalados localmente.

3.  ¿QUÉ DEBEN HACER LOS COLABORADORES AL CLONAR?
        Paso estándar por consola:

            git clone https://github.com/usuario/proyecto.git
            cd proyecto
            python3 -m venv .venv
            source .venv/bin/activate      # Windows: .venv\Scripts\activate
            pip install -r requirements.txt

        •   Cada persona crea **su propio** entorno virtual,
            independiente y aislado.
        •   Con `pip install -r requirements.txt` reproducen tu
            lista de dependencias.

4.  ¿CÓMO SE ACTUALIZA `requirements.txt`?
        •   Cuando alguien instale o actualice librerías en
            su venv, debe correr:

            pip freeze > requirements.txt
            git commit -am "Actualiza dependencias"
            git push

        •   Así, el equipo mantiene sincronizada la lista oficial.

5.  PUNTOS CLAVE A RECORDAR
        •   `.venv/` permanece local → se ignora en Git.
        •   Cada colaborador crea y activa **su** venv.
        •   `requirements.txt` es el contrato de dependencias.
        •   Nunca uses `sudo pip install …` dentro del repo; siempre
            instala dentro del venv activo.

╔═════════════════════════════╗
║  FLUJO RÁPIDO PARA TODOS    ║
╚═════════════════════════════╝
        # Clonar
        git clone <url>
        cd proyecto

        # Crear y activar entorno
        python -m venv .venv
        source .venv/bin/activate   # ó .venv\Scripts\activate

        # Instalar dep’s del proyecto
        pip install -r requirements.txt

        # Trabajar normalmente…
        python main.py
```

